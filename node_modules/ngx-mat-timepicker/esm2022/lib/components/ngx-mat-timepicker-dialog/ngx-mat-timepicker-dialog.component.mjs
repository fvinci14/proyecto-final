import { Component, Inject, ViewEncapsulation } from "@angular/core";
import { NgClass, NgSwitch, NgSwitchCase, NgIf, NgTemplateOutlet, AsyncPipe } from "@angular/common";
import { MAT_DIALOG_DATA, MatDialogModule } from "@angular/material/dialog";
import { MatButtonModule } from "@angular/material/button";
import { MatToolbarModule } from "@angular/material/toolbar";
//
import { NgxMatTimepickerBaseDirective } from "../../directives/ngx-mat-timepicker-base.directive";
import { NgxMatTimepickerMinutesFaceComponent } from "../ngx-mat-timepicker-minutes-face/ngx-mat-timepicker-minutes-face.component";
import { NgxMatTimepicker12HoursFaceComponent } from "../ngx-mat-timepicker-12-hours-face/ngx-mat-timepicker-12-hours-face.component";
import { NgxMatTimepicker24HoursFaceComponent } from "../ngx-mat-timepicker-24-hours-face/ngx-mat-timepicker-24-hours-face.component";
import { NgxMatTimepickerDialComponent } from "../ngx-mat-timepicker-dial/ngx-mat-timepicker-dial.component";
import { NgxMatTimepickerContentComponent } from "../ngx-mat-timepicker-content/ngx-mat-timepicker-content.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../services/ngx-mat-timepicker.service";
import * as i3 from "../../services/ngx-mat-timepicker-event.service";
import * as i4 from "../../services/ngx-mat-timepicker-locale.service";
import * as i5 from "@angular/material/button";
import * as i6 from "@angular/material/toolbar";
export class NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {
    constructor(data, _dialogRef, timepickerSrv, eventSrv, timepickerLocaleSrv) {
        super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);
        this.data = data;
        this._dialogRef = _dialogRef;
    }
    close() {
        this._dialogRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgxMatTimepickerDialogComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }, { token: i2.NgxMatTimepickerService }, { token: i3.NgxMatTimepickerEventService }, { token: i4.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.1", type: NgxMatTimepickerDialogComponent, isStandalone: true, selector: "ngx-mat-timepicker-dialog", usesInheritance: true, ngImport: i0, template: "<ng-template #cancelBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">CANCEL\r\n    </button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">OK\r\n    </button>\r\n</ng-template>\r\n<div mat-dialog-content>\r\n    <ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\r\n                                [inputElement]=\"data.inputElement\">\r\n        <div class=\"timepicker\"\r\n             [ngClass]=\"data.timepickerClass\">\r\n            <mat-toolbar [color]=\"color\"\r\n                         [class.is-editable]=\"data.enableKeyboardInput\"\r\n                         class=\"timepicker-header\">\r\n                <ngx-mat-timepicker-dial [color]=\"color\"\r\n                                         [format]=\"data.format\"\r\n                                         [hour]=\"(selectedHour | async)?.time\"\r\n                                         [minute]=\"(selectedMinute | async)?.time\"\r\n                                         [period]=\"selectedPeriod | async\"\r\n                                         [activeTimeUnit]=\"activeTimeUnit\"\r\n                                         [minTime]=\"data.minTime\"\r\n                                         [maxTime]=\"data.maxTime\"\r\n                                         [isEditable]=\"data.enableKeyboardInput\"\r\n                                         [editableHintTmpl]=\"data.editableHintTmpl\"\r\n                                         [minutesGap]=\"data.minutesGap\"\r\n                                         [hoursOnly]=\"data.hoursOnly\"\r\n                                         (periodChanged)=\"changePeriod($event)\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (hourChanged)=\"onHourChange($event)\"\r\n                                         (minuteChanged)=\"onMinuteChange($event)\"\r\n                ></ngx-mat-timepicker-dial>\r\n            </mat-toolbar>\r\n            <div class=\"timepicker__main-content\">\r\n                <div class=\"timepicker__body\"\r\n                     [ngSwitch]=\"activeTimeUnit\">\r\n                    <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\r\n                                                          [color]=\"color\"\r\n                                                          (hourChange)=\"onHourChange($event)\"\r\n                                                          [selectedHour]=\"selectedHour | async\"\r\n                                                          [minTime]=\"data.minTime\"\r\n                                                          [maxTime]=\"data.maxTime\"\r\n                                                          [format]=\"data.format\"\r\n                                                          (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\r\n                        <ng-template #ampmHours>\r\n                            <ngx-mat-timepicker-12-hours-face\r\n                                    [color]=\"color\"\r\n                                    (hourChange)=\"onHourChange($event)\"\r\n                                    [selectedHour]=\"selectedHour | async\"\r\n                                    [period]=\"selectedPeriod | async\"\r\n                                    [minTime]=\"data.minTime\"\r\n                                    [maxTime]=\"data.maxTime\"\r\n                                    (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\r\n                        </ng-template>\r\n                    </div>\r\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                     [color]=\"color\"\r\n                                                     [selectedMinute]=\"selectedMinute | async\"\r\n                                                     [selectedHour]=\"(selectedHour | async)?.time\"\r\n                                                     [minTime]=\"data.minTime\"\r\n                                                     [maxTime]=\"data.maxTime\"\r\n                                                     [format]=\"data.format\"\r\n                                                     [period]=\"selectedPeriod | async\"\r\n                                                     [minutesGap]=\"data.minutesGap\"\r\n                                                     (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ngx-mat-timepicker-content>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <div (click)=\"close()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n    </div>\r\n    <div (click)=\"setTime()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n    </div>\r\n</div>\r\n", styles: ["div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header.is-editable{height:auto}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: 
                // Common
                NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "ngmodule", type: 
                // Material
                MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "ngmodule", type: MatDialogModule }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "component", type: i6.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "component", type: 
                // NgxMatTimepicker
                NgxMatTimepickerContentComponent, selector: "ngx-mat-timepicker-content", inputs: ["appendToInput", "inputElement"] }, { kind: "component", type: NgxMatTimepickerDialComponent, selector: "ngx-mat-timepicker-dial", inputs: ["activeTimeUnit", "color", "editableHintTmpl", "format", "hour", "hoursOnly", "isEditable", "maxTime", "minTime", "minute", "minutesGap", "period"], outputs: ["hourChanged", "minuteChanged", "periodChanged", "timeUnitChanged"] }, { kind: "component", type: NgxMatTimepicker24HoursFaceComponent, selector: "ngx-mat-timepicker-24-hours-face" }, { kind: "component", type: NgxMatTimepicker12HoursFaceComponent, selector: "ngx-mat-timepicker-12-hours-face", inputs: ["period"] }, { kind: "component", type: NgxMatTimepickerMinutesFaceComponent, selector: "ngx-mat-timepicker-minutes-face", inputs: ["color", "format", "maxTime", "minTime", "minutesGap", "period", "selectedHour", "selectedMinute"], outputs: ["minuteChange"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgxMatTimepickerDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-dialog", encapsulation: ViewEncapsulation.None, standalone: true, imports: [
                        AsyncPipe,
                        // Common
                        NgClass,
                        NgIf,
                        NgSwitch,
                        NgSwitchCase,
                        NgTemplateOutlet,
                        // Material
                        MatButtonModule,
                        MatDialogModule,
                        MatToolbarModule,
                        // NgxMatTimepicker
                        NgxMatTimepickerContentComponent,
                        NgxMatTimepickerDialComponent,
                        NgxMatTimepicker24HoursFaceComponent,
                        NgxMatTimepicker12HoursFaceComponent,
                        NgxMatTimepickerMinutesFaceComponent
                    ], template: "<ng-template #cancelBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">CANCEL\r\n    </button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <button mat-button\r\n            [color]=\"color\">OK\r\n    </button>\r\n</ng-template>\r\n<div mat-dialog-content>\r\n    <ngx-mat-timepicker-content [appendToInput]=\"data.appendToInput\"\r\n                                [inputElement]=\"data.inputElement\">\r\n        <div class=\"timepicker\"\r\n             [ngClass]=\"data.timepickerClass\">\r\n            <mat-toolbar [color]=\"color\"\r\n                         [class.is-editable]=\"data.enableKeyboardInput\"\r\n                         class=\"timepicker-header\">\r\n                <ngx-mat-timepicker-dial [color]=\"color\"\r\n                                         [format]=\"data.format\"\r\n                                         [hour]=\"(selectedHour | async)?.time\"\r\n                                         [minute]=\"(selectedMinute | async)?.time\"\r\n                                         [period]=\"selectedPeriod | async\"\r\n                                         [activeTimeUnit]=\"activeTimeUnit\"\r\n                                         [minTime]=\"data.minTime\"\r\n                                         [maxTime]=\"data.maxTime\"\r\n                                         [isEditable]=\"data.enableKeyboardInput\"\r\n                                         [editableHintTmpl]=\"data.editableHintTmpl\"\r\n                                         [minutesGap]=\"data.minutesGap\"\r\n                                         [hoursOnly]=\"data.hoursOnly\"\r\n                                         (periodChanged)=\"changePeriod($event)\"\r\n                                         (timeUnitChanged)=\"changeTimeUnit($event)\"\r\n                                         (hourChanged)=\"onHourChange($event)\"\r\n                                         (minuteChanged)=\"onMinuteChange($event)\"\r\n                ></ngx-mat-timepicker-dial>\r\n            </mat-toolbar>\r\n            <div class=\"timepicker__main-content\">\r\n                <div class=\"timepicker__body\"\r\n                     [ngSwitch]=\"activeTimeUnit\">\r\n                    <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\"data.format === 24;else ampmHours\"\r\n                                                          [color]=\"color\"\r\n                                                          (hourChange)=\"onHourChange($event)\"\r\n                                                          [selectedHour]=\"selectedHour | async\"\r\n                                                          [minTime]=\"data.minTime\"\r\n                                                          [maxTime]=\"data.maxTime\"\r\n                                                          [format]=\"data.format\"\r\n                                                          (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-24-hours-face>\r\n                        <ng-template #ampmHours>\r\n                            <ngx-mat-timepicker-12-hours-face\r\n                                    [color]=\"color\"\r\n                                    (hourChange)=\"onHourChange($event)\"\r\n                                    [selectedHour]=\"selectedHour | async\"\r\n                                    [period]=\"selectedPeriod | async\"\r\n                                    [minTime]=\"data.minTime\"\r\n                                    [maxTime]=\"data.maxTime\"\r\n                                    (hourSelected)=\"onHourSelected($event)\"></ngx-mat-timepicker-12-hours-face>\r\n                        </ng-template>\r\n                    </div>\r\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                     [color]=\"color\"\r\n                                                     [selectedMinute]=\"selectedMinute | async\"\r\n                                                     [selectedHour]=\"(selectedHour | async)?.time\"\r\n                                                     [minTime]=\"data.minTime\"\r\n                                                     [maxTime]=\"data.maxTime\"\r\n                                                     [format]=\"data.format\"\r\n                                                     [period]=\"selectedPeriod | async\"\r\n                                                     [minutesGap]=\"data.minutesGap\"\r\n                                                     (minuteChange)=\"onMinuteChange($event)\"></ngx-mat-timepicker-minutes-face>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ngx-mat-timepicker-content>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <div (click)=\"close()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n    </div>\r\n    <div (click)=\"setTime()\">\r\n        <ng-container\r\n                *ngTemplateOutlet=\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n    </div>\r\n</div>\r\n", styles: ["div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header.is-editable{height:auto}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }, { type: i2.NgxMatTimepickerService }, { type: i3.NgxMatTimepickerEventService }, { type: i4.NgxMatTimepickerLocaleService }] });
//# sourceMappingURL=data:application/json;base64,