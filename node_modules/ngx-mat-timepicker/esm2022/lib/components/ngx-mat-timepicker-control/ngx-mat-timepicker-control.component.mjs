import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from "@angular/core";
import { NgClass } from "@angular/common";
import { FormsModule } from "@angular/forms";
import { MatInputModule } from "@angular/material/input";
import { MatFormFieldModule } from "@angular/material/form-field";
import { NgxMatTimepickerParserPipe } from "../../pipes/ngx-mat-timepicker-parser.pipe";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { NgxMatTimepickerTimeLocalizerPipe } from "../../pipes/ngx-mat-timepicker-time-localizer.pipe";
import * as i0 from "@angular/core";
import * as i1 from "../../pipes/ngx-mat-timepicker-parser.pipe";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/forms";
function concatTime(currentTime, nextTime) {
    const isNumber = /\d/.test(nextTime);
    if (isNumber) {
        const time = currentTime + nextTime;
        return +time;
    }
    return undefined;
}
export class NgxMatTimepickerControlComponent {
    static { this.nextId = 0; }
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    set floatLabel(newValue) {
        this._floatLabel = newValue;
    }
    get floatLabel() {
        return this._floatLabel;
    }
    constructor(_timeParser) {
        this._timeParser = _timeParser;
        this.id = NgxMatTimepickerControlComponent.nextId++;
        this.timeChanged = new EventEmitter();
        this._color = "primary";
        this._floatLabel = "auto";
    }
    changeTime(event) {
        event.stopPropagation();
        const char = event.data;
        const time = concatTime(String(this.time), char);
        this._changeTimeIfValid(time);
    }
    decrease() {
        if (!this.disabled) {
            let previousTime = +this.time - 1;
            if (previousTime < this.min) {
                previousTime = this.max;
            }
            if (this._isSelectedTimeDisabled(previousTime)) {
                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));
            }
            if (previousTime !== this.time) {
                this.timeChanged.emit(previousTime);
            }
        }
    }
    increase() {
        if (!this.disabled) {
            let nextTime = +this.time + 1;
            if (nextTime > this.max) {
                nextTime = this.min;
            }
            if (this._isSelectedTimeDisabled(nextTime)) {
                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));
            }
            if (nextTime !== this.time) {
                this.timeChanged.emit(nextTime);
            }
        }
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line:no-string-literal
        if (changes["timeList"] && this.time != null) {
            if (this._isSelectedTimeDisabled(this.time)) {
                this._setAvailableTime();
            }
        }
    }
    onBlur() {
        this.isFocused = false;
        if (this._previousTime !== this.time) {
            this._changeTimeIfValid(+this.time);
        }
    }
    onFocus() {
        this.isFocused = true;
        this._previousTime = this.time;
    }
    onKeydown(event) {
        event.stopPropagation();
        if (!NgxMatTimepickerUtils.isDigit(event)) {
            event.preventDefault();
        }
        switch (event.key) {
            case "ArrowUp":
                this.increase();
                break;
            case "ArrowDown":
                this.decrease();
                break;
        }
        if (this.preventTyping && event.key !== "Tab") {
            event.preventDefault();
        }
    }
    onModelChange(value) {
        this.time = +this._timeParser.transform(value, this.timeUnit);
    }
    _changeTimeIfValid(value) {
        if (!isNaN(value)) {
            this.time = value;
            if (this.time > this.max) {
                const timeString = String(value);
                this.time = +timeString[timeString.length - 1];
            }
            if (this.time < this.min) {
                this.time = this.min;
            }
            this.timeChanged.emit(this.time);
        }
    }
    _getAvailableTime(currentTime, fn) {
        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);
        const availableTime = fn(currentTimeIndex);
        return availableTime != null ? availableTime : this.time;
    }
    _getNextAvailableTime(index) {
        const timeCollection = this.timeList;
        const maxValue = timeCollection.length;
        for (let i = index + 1; i < maxValue; i++) {
            const time = timeCollection[i];
            if (!time.disabled) {
                return time.time;
            }
        }
        return undefined;
    }
    _getPrevAvailableTime(index) {
        for (let i = index; i >= 0; i--) {
            const time = this.timeList[i];
            if (!time.disabled) {
                return time.time;
            }
        }
        return undefined;
    }
    _isSelectedTimeDisabled(time) {
        return this.timeList.find((faceTime) => faceTime.time === time).disabled;
    }
    _setAvailableTime() {
        this.time = this.timeList.find(t => !t.disabled).time;
        this.timeChanged.emit(this.time);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgxMatTimepickerControlComponent, deps: [{ token: i1.NgxMatTimepickerParserPipe }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.1", type: NgxMatTimepickerControlComponent, isStandalone: true, selector: "ngx-mat-timepicker-time-control", inputs: { color: "color", disabled: "disabled", floatLabel: "floatLabel", max: "max", min: "min", placeholder: "placeholder", preventTyping: "preventTyping", time: "time", timeList: "timeList", timeUnit: "timeUnit" }, outputs: { timeChanged: "timeChanged" }, providers: [NgxMatTimepickerParserPipe], usesOnChanges: true, ngImport: i0, template: "<mat-form-field [color]=\"color\"\r\n                [floatLabel]=\"floatLabel\"\r\n                [ngClass]=\"{'active': isFocused}\"\r\n                class=\"ngx-mat-timepicker-control\">\r\n    <input id=\"ngx_mat_timepicker_field_{{id}}\"\r\n           name=\"ngx_mat_timepicker_field_{{id}}\"\r\n           matInput\r\n           maxlength=\"2\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [placeholder]=\"placeholder\"\r\n           [disabled]=\"disabled\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (beforeinput)=\"changeTime($event)\"\r\n           (focus)=\"onFocus()\"\r\n           (blur)=\"onBlur()\" />\r\n    <div class=\"arrows-wrap\"\r\n         matSuffix>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"increase()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\r\n            </svg>\r\n        </span>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"decrease()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0V0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\r\n            </svg>\r\n        </span>\r\n    </div>\r\n</mat-form-field>\r\n", styles: [".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\n"], dependencies: [{ kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i2.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "pipe", type: NgxMatTimepickerParserPipe, name: "ngxMatTimepickerParser" }, { kind: "pipe", type: NgxMatTimepickerTimeLocalizerPipe, name: "timeLocalizer" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgxMatTimepickerControlComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-time-control", changeDetection: ChangeDetectionStrategy.OnPush, providers: [NgxMatTimepickerParserPipe], standalone: true, imports: [MatFormFieldModule, NgClass, MatInputModule, FormsModule, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe], template: "<mat-form-field [color]=\"color\"\r\n                [floatLabel]=\"floatLabel\"\r\n                [ngClass]=\"{'active': isFocused}\"\r\n                class=\"ngx-mat-timepicker-control\">\r\n    <input id=\"ngx_mat_timepicker_field_{{id}}\"\r\n           name=\"ngx_mat_timepicker_field_{{id}}\"\r\n           matInput\r\n           maxlength=\"2\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [placeholder]=\"placeholder\"\r\n           [disabled]=\"disabled\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (beforeinput)=\"changeTime($event)\"\r\n           (focus)=\"onFocus()\"\r\n           (blur)=\"onBlur()\" />\r\n    <div class=\"arrows-wrap\"\r\n         matSuffix>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"increase()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\r\n            </svg>\r\n        </span>\r\n        <span class=\"arrow\"\r\n              role=\"button\"\r\n              (click)=\"decrease()\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n                 height=\"18\"\r\n                 viewBox=\"0 0 24 24\"\r\n                 width=\"18\">\r\n                <path d=\"M0 0h24v24H0V0z\"\r\n                      fill=\"none\" />\r\n                <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\r\n            </svg>\r\n        </span>\r\n    </div>\r\n</mat-form-field>\r\n", styles: [".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\n"] }]
        }], ctorParameters: () => [{ type: i1.NgxMatTimepickerParserPipe }], propDecorators: { color: [{
                type: Input
            }], disabled: [{
                type: Input
            }], floatLabel: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], preventTyping: [{
                type: Input
            }], time: [{
                type: Input
            }], timeChanged: [{
                type: Output
            }], timeList: [{
                type: Input
            }], timeUnit: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,