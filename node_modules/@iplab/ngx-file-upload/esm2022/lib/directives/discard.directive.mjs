import { Directive, Input, Optional, Host, Self } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../components/multiple-file-upload/file-upload.component";
import * as i2 from "../components/simple-file-upload/simple-file-upload.component";
export class FilesDiscardDirective {
    set discard(discard) {
        if (typeof discard === 'string' && (discard === 'true' || discard === 'false')) {
            this.discardValue = JSON.parse(discard.toLowerCase());
        }
        else if (typeof discard === 'boolean') {
            this.discardValue = discard;
        }
        else {
            throw Error(`Provided value in directive [discard]="${discard}" is not boolean.`);
        }
    }
    constructor(fileUpload, simpleFileUpload) {
        this.discardValue = null;
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    ngAfterViewInit() {
        this.setAccept(this.discardValue);
    }
    ngOnChanges(changes) {
        if ('discard' in changes && changes['discard'].currentValue !== changes['discard'].previousValue) {
            this.setAccept(this.discardValue);
        }
    }
    setAccept(discard) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.discardInvalid(discard);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: FilesDiscardDirective, deps: [{ token: i1.FileUploadComponent, host: true, optional: true, self: true }, { token: i2.SimpleFileUploadComponent, host: true, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.2", type: FilesDiscardDirective, selector: "file-upload[discard]", inputs: { discard: "discard" }, host: { properties: { "attr.discard": "discard ? discard : null" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: FilesDiscardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'file-upload[discard]',
                    host: { '[attr.discard]': 'discard ? discard : null' }
                }]
        }], ctorParameters: () => [{ type: i1.FileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }, { type: i2.SimpleFileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }], propDecorators: { discard: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY2FyZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pcGxhYi9uZ3gtZmlsZS11cGxvYWQvc3JjL2xpYi9kaXJlY3RpdmVzL2Rpc2NhcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFpQixRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBNEIsTUFBTSxlQUFlLENBQUM7Ozs7QUFVaEgsTUFBTSxPQUFPLHFCQUFxQjtJQUk5QixJQUNXLE9BQU8sQ0FBQyxPQUF5QjtRQUN4QyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLE9BQU8sS0FBSyxNQUFNLElBQUksT0FBTyxLQUFLLE9BQU8sQ0FBQyxFQUFFO1lBQzVFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUN6RDthQUFNLElBQUksT0FBTyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQy9CO2FBQU07WUFDSCxNQUFNLEtBQUssQ0FBQywwQ0FBMEMsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3JGO0lBQ0wsQ0FBQztJQUlELFlBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztRQWpCbkUsaUJBQVksR0FBbUIsSUFBSSxDQUFDO1FBYTNCLGVBQVUsR0FBb0QsSUFBSSxDQUFDO1FBS2hGLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxJQUFJLGdCQUFnQixDQUFDO0lBQ3JELENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGFBQWEsRUFBRTtZQUM5RixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7SUFFTyxTQUFTLENBQUMsT0FBZ0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7OEdBckNRLHFCQUFxQjtrR0FBckIscUJBQXFCOzsyRkFBckIscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLElBQUksRUFBRSxFQUFDLGdCQUFnQixFQUFFLDBCQUEwQixFQUFDO2lCQUN2RDs7MEJBbUJRLFFBQVE7OzBCQUFJLElBQUk7OzBCQUFJLElBQUk7OzBCQUN4QixRQUFROzswQkFBSSxJQUFJOzswQkFBSSxJQUFJO3lDQWRsQixPQUFPO3NCQURqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT3B0aW9uYWwsIEhvc3QsIFNlbGYsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9tdWx0aXBsZS1maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQvc2ltcGxlLWZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcblxyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWxlLXVwbG9hZFtkaXNjYXJkXScsXHJcbiAgICBob3N0OiB7J1thdHRyLmRpc2NhcmRdJzogJ2Rpc2NhcmQgPyBkaXNjYXJkIDogbnVsbCd9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlc0Rpc2NhcmREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIHByaXZhdGUgZGlzY2FyZFZhbHVlOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBzZXQgZGlzY2FyZChkaXNjYXJkOiBib29sZWFuIHwgc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkaXNjYXJkID09PSAnc3RyaW5nJyAmJiAoZGlzY2FyZCA9PT0gJ3RydWUnIHx8IGRpc2NhcmQgPT09ICdmYWxzZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzY2FyZFZhbHVlID0gSlNPTi5wYXJzZShkaXNjYXJkLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRpc2NhcmQgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2NhcmRWYWx1ZSA9IGRpc2NhcmQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFByb3ZpZGVkIHZhbHVlIGluIGRpcmVjdGl2ZSBbZGlzY2FyZF09XCIke2Rpc2NhcmR9XCIgaXMgbm90IGJvb2xlYW4uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCB8IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBzaW1wbGVGaWxlVXBsb2FkOiBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5maWxlVXBsb2FkID0gZmlsZVVwbG9hZCB8fCBzaW1wbGVGaWxlVXBsb2FkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRBY2NlcHQodGhpcy5kaXNjYXJkVmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCdkaXNjYXJkJyBpbiBjaGFuZ2VzICYmIGNoYW5nZXNbJ2Rpc2NhcmQnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2Rpc2NhcmQnXS5wcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QWNjZXB0KHRoaXMuZGlzY2FyZFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRBY2NlcHQoZGlzY2FyZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbGVVcGxvYWQgJiYgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wuZGlzY2FyZEludmFsaWQoZGlzY2FyZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==