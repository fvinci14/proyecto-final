import { Directive, Input, Optional, Host, Self } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../components/multiple-file-upload/file-upload.component";
import * as i2 from "../components/simple-file-upload/simple-file-upload.component";
export class FilesNativeDirective {
    set native(isNative) {
        if (typeof isNative === 'string' && (isNative === 'true' || isNative === 'false')) {
            this.nativeValue = JSON.parse(isNative.toLowerCase());
        }
        else if (typeof isNative === 'boolean') {
            this.nativeValue = isNative;
        }
        else {
            throw Error(`Provided value in directive [native]="${isNative}" is not boolean.`);
        }
    }
    constructor(fileUpload, simpleFileUpload) {
        this.nativeValue = null;
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    ngAfterViewInit() {
        this.enableNative(this.nativeValue);
    }
    ngOnChanges(changes) {
        if ('native' in changes && changes['native'].currentValue !== changes['native'].previousValue) {
            this.enableNative(this.nativeValue);
        }
    }
    enableNative(isNative) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.native(isNative);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: FilesNativeDirective, deps: [{ token: i1.FileUploadComponent, host: true, optional: true, self: true }, { token: i2.SimpleFileUploadComponent, host: true, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.2", type: FilesNativeDirective, selector: "file-upload[native]", inputs: { native: "native" }, host: { properties: { "attr.native": "native ? native : null" } }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: FilesNativeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'file-upload[native]',
                    host: { '[attr.native]': 'native ? native : null' }
                }]
        }], ctorParameters: () => [{ type: i1.FileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }, { type: i2.SimpleFileUploadComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }, {
                    type: Self
                }] }], propDecorators: { native: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lwbGFiL25neC1maWxlLXVwbG9hZC9zcmMvbGliL2RpcmVjdGl2ZXMvbmF0aXZlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQTRCLE1BQU0sZUFBZSxDQUFDOzs7O0FBVWhILE1BQU0sT0FBTyxvQkFBb0I7SUFJN0IsSUFDVyxNQUFNLENBQUMsUUFBMEI7UUFDeEMsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLElBQUksQ0FBQyxRQUFRLEtBQUssTUFBTSxJQUFJLFFBQVEsS0FBSyxPQUFPLENBQUMsRUFBRTtZQUMvRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDekQ7YUFBTSxJQUFJLE9BQU8sUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN0QyxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQztTQUMvQjthQUFNO1lBQ0gsTUFBTSxLQUFLLENBQUMseUNBQXlDLFFBQVEsbUJBQW1CLENBQUMsQ0FBQztTQUNyRjtJQUNMLENBQUM7SUFJRCxZQUNnQyxVQUErQixFQUMvQixnQkFBMkM7UUFqQm5FLGdCQUFXLEdBQW1CLElBQUksQ0FBQztRQWExQixlQUFVLEdBQW9ELElBQUksQ0FBQztRQUtoRixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxnQkFBZ0IsQ0FBQztJQUNyRCxDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksUUFBUSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEVBQUU7WUFDM0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBRU8sWUFBWSxDQUFDLFFBQWlCO1FBQ2xDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUM7SUFDTCxDQUFDOzhHQXJDUSxvQkFBb0I7a0dBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFKaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixJQUFJLEVBQUUsRUFBQyxlQUFlLEVBQUUsd0JBQXdCLEVBQUM7aUJBQ3BEOzswQkFtQlEsUUFBUTs7MEJBQUksSUFBSTs7MEJBQUksSUFBSTs7MEJBQ3hCLFFBQVE7OzBCQUFJLElBQUk7OzBCQUFJLElBQUk7eUNBZGxCLE1BQU07c0JBRGhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSG9zdCwgU2VsZiwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL211bHRpcGxlLWZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NpbXBsZS1maWxlLXVwbG9hZC9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuXHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ2ZpbGUtdXBsb2FkW25hdGl2ZV0nLFxyXG4gICAgaG9zdDogeydbYXR0ci5uYXRpdmVdJzogJ25hdGl2ZSA/IG5hdGl2ZSA6IG51bGwnfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZXNOYXRpdmVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIHByaXZhdGUgbmF0aXZlVmFsdWU6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBuYXRpdmUoaXNOYXRpdmU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGlzTmF0aXZlID09PSAnc3RyaW5nJyAmJiAoaXNOYXRpdmUgPT09ICd0cnVlJyB8fCBpc05hdGl2ZSA9PT0gJ2ZhbHNlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5uYXRpdmVWYWx1ZSA9IEpTT04ucGFyc2UoaXNOYXRpdmUudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXNOYXRpdmUgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB0aGlzLm5hdGl2ZVZhbHVlID0gaXNOYXRpdmU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFByb3ZpZGVkIHZhbHVlIGluIGRpcmVjdGl2ZSBbbmF0aXZlXT1cIiR7aXNOYXRpdmV9XCIgaXMgbm90IGJvb2xlYW4uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCB8IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBzaW1wbGVGaWxlVXBsb2FkOiBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5maWxlVXBsb2FkID0gZmlsZVVwbG9hZCB8fCBzaW1wbGVGaWxlVXBsb2FkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbmFibGVOYXRpdmUodGhpcy5uYXRpdmVWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJ25hdGl2ZScgaW4gY2hhbmdlcyAmJiBjaGFuZ2VzWyduYXRpdmUnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ25hdGl2ZSddLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVOYXRpdmUodGhpcy5uYXRpdmVWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZW5hYmxlTmF0aXZlKGlzTmF0aXZlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVVwbG9hZCAmJiB0aGlzLmZpbGVVcGxvYWQuY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGVVcGxvYWQuY29udHJvbC5uYXRpdmUoaXNOYXRpdmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=